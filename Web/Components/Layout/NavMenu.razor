@using Web.Models;
@using Web.Helper;
@implements IDisposable

@inject NavigationManager NavigationManager

<div>
  <nav class="w-full own-bg-primary text-white">
    <div class="flex flex-col sm:flex-row justify-between items-center container py-8">
      <p class="inline text-4xl font-bold text-white my-4 sm:my-0">
        Justin Urbanek
      </p>

      <div class="flex items-center gap-8">
        <div class="@($"navbar-content " + (isNavBarOpen ? "flex" : "hidden lg:block")) flex-col lg:flex-row">
          @foreach (var navLink in navLinks) {
            <NavLink
              href="@navLink.Url"
              class="@($"navbar-btn mx-2 px-4 py-2 rounded-md {(currentUrl == navLink.Url ? "navbar-btn-active" : "")}")"
            >
              @navLink.Name
            </NavLink>

          }
          <Dropdown>
            <DropdownToggle Class="navbar-btn px-4 py-2 rounded-md">
              @currentLanguage
            </DropdownToggle>
            <DropdownMenu>
              @foreach (var language in languages) {
                <DropdownItem>
                  @language
                </DropdownItem>
              }
            </DropdownMenu>
          </Dropdown>
        </div>

        <Icon Name="@(!isNavBarOpen ? IconName.Bars : IconName.Times)" IconSize="IconSize.x2" Class="block lg:hidden" @onclick="ToggleNavBar" />
      </div>
    </div>
  </nav>
</div>


@code {
  private string? currentUrl;
  private List<NavLinkView> navLinks;
  private string currentLanguage = "DE";
  private string[] languages = new string[] { "DE", "EN" };
  private bool isNavBarOpen = false;

  protected override void OnInitialized() {
    currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;

    navLinks = NavLinkViewHelper.GetNavBarLinks();
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

  public void Dispose() {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }

  private void ToggleNavBar() {
    isNavBarOpen = !isNavBarOpen;
  }
}

