@using Web.Models

<div class="w-full relative own-bg-primary @(Class)">
  <div class="container flex flex-wrap lg:flex-nowrap justify-around items-center gap-8 py-12">

    <div class="w-full flex flex-wrap justify-center gap-4">
      @foreach (var card in Cards) {
        <FlipCard Card="card" OnCardClicked=HandleCardClicked />
      }
    </div>

    <Modal @ref="modalRef" Class="fixed w-full sm:w-fit h-fit !top-1/2 !left-1/2 !-translate-x-1/2 !-translate-y-1/2">
      <ModalContent Centered>
        <ModalHeader>
          <ModalTitle>@CurrentCard?.FrontText</ModalTitle>
          <CloseButton />
        </ModalHeader>
        <ModalBody>
          <img src="@CurrentCard?.ImageUrl" alt="@CurrentCard?.FrontText" class="w-full h-auto rounded-xl" />

          <p class="text-lg sm:text-xl lg:text-3xl text-center text-white">
            @CurrentCard?.BackText
          </p>
        </ModalBody>
      </ModalContent>
    </Modal>

  </div>
</div>

<style>
  .flip-box:hover .back {
    transform: rotateY(0deg);
    z-index: 10;
  }

  .flip-box:hover .front {
    transform: rotateY(180deg);
    z-index: -1;
  }

  .back,
  .front {
    position: relative;
    display: flex;
    justify-content: center;
    align-content: center;
    flex: 0 0 100%;
    -webkit-transition: all 1s cubic-bezier(0.5, 1, 0.5, 1);
    transition: all 1s cubic-bezier(0.5, 1.3, 0.5, 1.3);
    transform-style: preserve-3d;
    background-size: cover;
    background-position: center;
  }

  .back {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 100%;
    z-index: -1;
    transform: rotateY(-180deg);
  }

  .content {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    -webkit-transform: translateZ(50px);
    transform: translateZ(50px);
    text-shadow: 0px 0px 2px black;
    text-align: center;
  }
</style>

@code {
  [Parameter]
  public string Class { get; set; } = string.Empty;

  [Parameter]
  [EditorRequired]
  public List<FlipCardItem> Cards { get; set; } = default!;

  private Modal modalRef { get; set; }
  private FlipCardItem? CurrentCard { get; set; } = default!;

  protected override void OnInitialized() {
    base.OnInitialized();
  }

  private void HandleCardClicked(FlipCardItem clickedCard) {
    CurrentCard = clickedCard;
    ShowModal();
  }

  private Task ShowModal() {
    return modalRef.Show();
  }
}
