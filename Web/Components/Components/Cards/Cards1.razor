@using Web.Components.Components.Galleries
@using Web.Components.Enums
@using Web.Models

<div class="flex flex-wrap justify-around items-center own-bg-primary gap-32 lg:gap-16 py-24 overflow-hidden @(Class)">
  @for (int i = 0; i < Items.Count; i++) {
    <Card1 Class="w-full lg:w-1/2 xl:w-1/3"
           Item=@Items[i]
           Index="i"
           OnCardClick="HandleCardClick" />
  }

  @* It's important to aknowledge that if you test the UI you have to test it with real mobile devices (or real simulators),
  because the browser's responsive design mode is not accurate. *@
  <Modal @ref="modalRef" Class="fixed !p-0 px-0 w-full h-fit !top-1/2 !left-1/2 !-translate-x-1/2 !-translate-y-1/2">
    <ModalContent Size="ModalSize.ExtraLarge" Centered>
      <ModalHeader>
        <ModalTitle>@CurrentItem?.Title</ModalTitle>
        <CloseButton />
      </ModalHeader>
      <ModalBody Class="max-h-[80vh] overflow-auto">
        <div class="flex flex-col-reverse xl:flex-row-reverse justify-around items-center gap-4">
          @if (CurrentItem?.Slides != null && CurrentItem.Slides.Count > 0) {
            <ImageCarosel Class="w-full xl:w-1/2" Slides=@CurrentItem.Slides />
          }

          <div class="w-full xl:w-1/2 flex flex-col justify-center items-center gap-4 mt-5">
            <p class="text-lg sm:text-xl lg:text-3xl text-center text-white">
              @CurrentItem?.Description
            </p>

            <p class="text-lg sm:text-xl lg:text-3xl text-center text-white">
              @CurrentItem?.MoreInfoText
            </p>

            <Badge Color="@badgeColor.Item1">@badgeColor.Item2</Badge>

            <div class="w-full flex justify-center gap-4">
              @if (!string.IsNullOrEmpty(CurrentItem?.LinkToLiveSite)) {
                <Button Color="Color.Info" Type="ButtonType.Link" To="@CurrentItem?.LinkToLiveSite" Target="Target.Blank" rel="nofollow" Outline>
                  Seite besuchen
                  <Icon Name="IconName.ExternalLinkSquareAlt" Class="ml-2" />
                </Button>
              }

              @if (!string.IsNullOrEmpty(CurrentItem?.LinkToSourceCode)) {
                <Button Color="Color.Info" Type="ButtonType.Link" To="@CurrentItem?.LinkToSourceCode" Target="Target.Blank" rel="nofollow" Outline>
                  Source Code ansehen
                  <Icon Name="IconName.ExternalLinkSquareAlt" Class="ml-2" />
                </Button>
              } else if (CurrentItem?.LinkToSourceCodes?.Count > 0) {
                <div class="flex flex-wrap justify-center items-center">
                  
                  @foreach (var item in CurrentItem.LinkToSourceCodes.Select((link, index) => new { link, index })) {
                    <Button Class="w-1/3 m-4" Color="Color.Info" Type="ButtonType.Link" To="@item.link" Target="Target.Blank" rel="nofollow" Outline>
                      @(item.index + 1 + ".") Source Code ansehen
                      <Icon Name="IconName.ExternalLinkSquareAlt" Class="ml-2" />
                    </Button>
                  }

                </div>
              }
            </div>
          </div>
        </div>
      </ModalBody>
    </ModalContent>
  </Modal>
</div>

@code {
  [Parameter]
  public string Class { get; set; } = string.Empty;

  [Parameter]
  [EditorRequired]
  public List<ProjectMenuItem> Items { get; set; } = default!;

  private ProjectMenuItem? CurrentItem;
  private Modal modalRef;
  private (Color, string) badgeColor => GetBadgeColor(CurrentItem?.Status ?? ProjectStatus.Unknown);

  protected override void OnInitialized() {
    base.OnInitialized();
  }

  private void HandleCardClick(ProjectMenuItem selectedItem) {
    CurrentItem = selectedItem;

    modalRef.Show();
  }

  private (Color, string) GetBadgeColor(ProjectStatus status) {
    return status switch {
      ProjectStatus.Unknown => (Color.Secondary, "Unbekannt"),
      ProjectStatus.InProgress => (Color.Info, "In Bearbeitung"),
      ProjectStatus.Completed => (Color.Success, "Abgeschlossen"),
      ProjectStatus.Canceled => (Color.Danger, "Abgebrochen"),
      ProjectStatus.OnHold => (Color.Primary, "Pausiert"),
      _ => (Color.Secondary, "Unbekannt")
    };
  }
}
